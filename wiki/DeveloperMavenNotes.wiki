#summary How to setup an environment to build this project with maven
#labels Featured,Phase-Implementation

= Maven Repository considerations =
Since version 1.0.2, this project is hosted on *[http://oss.sonatype.org/ Nexus OSS Repository]* that receive staged artifacts. After a while theses artifacts can be promoted to release artifacts and synced with the *Maven Central Repository* hourly

= Maven project integration =
 * Add in your *pom.xml* a dependency into JBusyComponent artifact:
{{{
<dependency>
    <groupId>org.divxdede</groupId>
    <artifactId>jbusycomponent</artifactId>
    <version>1.0.2</version>
</dependency> 
}}}

The [http://repo2.maven.org/maven2/org/divxdede/jbusycomponent/ Maven Central Repository] contains released versions. If you want use snapshot or staged versions, refer to the [http://oss.sonatype.org/content/groups/staging/org/divxdede/jbusycomponent Nexus OSS Repository].

Be careful, the *older* release `1.0.0` is deployed into the `com.google.code` groupId instead of `org.divxdede`

= Building this project =
This project is build on top of maven and need some tools for achieve a complete deployement process. Keep in mind that this process require some private stuff like  
 # Deployement access to the OSS Nexus Repository 
 # PGP Secret Key for sign artifacts.
 # Google Code Subversion access for commiters (*that can be provided on demand*)
 # Google code authorization for setting new  manual downloads
 
That's why, The following guide can help you to build or participate to this project but not really deploy yourself artifacts.

== Required stuff ==
3 tools are needed:
 # Subversion that can be found http://www.open.collab.net/downloads/subversion/ for checkout or commiters
 * Maven that can be downloaded http://maven.apache.org/download.html for build it
 * GnuPG that can be downloaded http://www.gnupg.org/ for sign it 

In order to be synced into the Maven Central Repository, JBusyComponent artifacts are signed. the public key *100D95E6* can be found at http://pgp.mit.edu/ for authentification control. You don't need a sign it for a simple build. This steps is only required when deploying.

You need to do some pre-configurations of theses tools:
 * `%MAVEN_HOME%/conf/settings.xml` for configure repository access (required for deploy)
 * GnuPG ring keys required for sign artifacts (and `$GNUPGHOME` environment variable)

The `settings.xml` must refer repository access like it:
{{{
<settings>
    <servers>
        <server>
            <id>sonatype-nexus-staging</id>
            <username>your_sonatype_login</username>
            <password>your_sonatype_passwd</password>
        </server>
        <server>
            <id>sonatype-nexus-snapshots</id>
            <username>your_sonatype_login</username>
            <password>your_sonatype_passwd</password>
        </server>
    </servers>
</settings>
}}}

After what, you can build this project following theses commands:
 * Build the project: `mvn clean package`
 * Install the artifact in local repository: `mvn install`

== Create a release tag in subversion ==
For this step you require a write access over `https` on googlecode subversion.
You can be promote to contributors on demand but you need a googlecode account.
 # `mvn clean release:prepare -Dusername=XXXXXX -Dpassword=XXXXXXX`
 # `mvn release:perform -Dusername=XXXXXX -Dpassword=XXXXXXX`
 # `mvn release:clean`

For this step, you should require to run you `cmd` windows shell in Administrator Mode for Windows Vista / Windows 7

For deploying *apidocs* inside googlecode, we commit this docs under svn and browse it directly. The counter-part of this method is that Ã¬t requires `svn:mime-type` for all files in order to be correctly rendered.

You must configure your svn `config` file under `%USER%/AppData/Roaming/Subversion` on windows like it:
{{{
[miscellany]
enable-auto-props = yes

[auto-props]
*.html = svn:mime-type=text/html
*.css = svn:mime-type=text/css
*.txt = svn:mime-type=text/plain
*.jpg = svn:mime-type=image/jpeg
*.gif = svn:mime-type=image/gif
*.png = svn:mime-type=image/png
*.jar = svn:mime-type=application/java-archive
*.jnlp = svn:mime-type=application/x-java-jnlp-file
}}}

Be careful, this auto mime-types doesn't work as-is under netbeans. At this time i add theses files directly from `svn` command lines.

== Deploying staged artifacts ==
 * `mvn clean deploy -Dgpg.passphrase=yourpassphrase`
 * You should use after the [http://oss.sonatype.org/index.html OSS Nexus repository] interface to promote an artifact

= Creating an account on Sonatype OSS repository =
See the [http://nexus.sonatype.org/oss-repository-hosting.html Sonatype Repository hosting guide]

Your *pom.xml*'s project must describe sonatype repositories:
{{{
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Nexus Release Repository</name>
            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>http://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
}}}

 * On sonatype, you must promote this staged artifact to release

= Maven documentations resources =
 * [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html Maven lifecycle]
 * [http://maven.apache.org/plugins/maven-compiler-plugin/ maven-compiler-plugin]
 * [http://maven.apache.org/plugins/maven-resources-plugin/ maven-resources-plugin]
 * [http://maven.apache.org/plugins/maven-source-plugin/ maven-source-plugin]
 * [http://maven.apache.org/plugins/maven-javadoc-plugin/ maven-javadoc-plugin]
 * [http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/ how to generate pgp signatures]
 * [http://www.sonatype.com/books/mvnref-book/reference/writing-plugins.html Writing Maven Plugins]