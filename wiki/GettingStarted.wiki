#summary First step using JBusyComponent

= Introduction =

We will introduce how use JBusyComponent easily. 
JBusyComponent wrap any swing component (called `view`) and take place on the components hierarchy. 

The JBusyComponent let you to manage `busy` properties on the `view` with a *`BusyModel`*

== The first busy component ==
Let's see how to set busy a JTree :
{{{
>       /** The frame of our example
>        */
>       JFrame frame = new JFrame();
>       frame.setDefaultCloseOperation( frame.EXIT_ON_CLOSE );
>       
>       /** Create the JTree that will be our view
>        */
>       JTree tree = new JTree();
>
>       /** Create our JBusyComponent that wrap the JTree 
>        */
>       JBusyComponent<JTree> busyComponent = new JBusyComponent<JTree>(tree);
>
>       /** Add the JBusyComponent instead of the JTree to the frame
>        */
>       frame.getContentPane().add( busyComponent );
>       
>       /** Set our JTree busy !!!!
>        */
>       busyComponent.setBusy(true);
>       
>       /** show it
>        */
>       frame.pack();
>       frame.setVisible(true);
}}}

== Use the `BusyModel` for more *fun* features ==
A JBusyComponent refer a `BusyModel` to provide more functionnality:
 * *Start / Stop* the busy state with `setBusy( boolean )`
 * *Cancellable* property tells if the busy state can be cancelled `setCancellable( boolean )`
 * *Determinate* property tells if the bust state can be tracked `setDeterminate( boolean )`

{{{
>     /** Set our JTree busy but cancellable
>      */
>     BusyModel model = busyComponent.getBusyModel();
>     model.setCancellable(true);
>     model.setBusy(true);
}}}
== Using a determinate `BusyModel` ==
A `BusyModel` extends `BoundedRangeModel`.
That means that a `BusyModel` can manage the busy progression like any JProgressBar do.

Before all, for enable this feature you need to set the `BusyModel` in a determinate mode `BusyModel.setDeterminate(true)` and you can control the range of the progression and the current value.

This exemple set the `BusyModel` determinate to 50%:
{{{
>    model.setDeterminate(true);
>    model.setMinimum(0);
>    model.setMaximum(200);
>    model.setValue(100);  // 100 is at 50% from the range [0 - 200]
>    model.setBusy(true);
}}}